#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ AI –∞–Ω–∞–ª—ñ–∑—É —Ä–µ–ø—É—Ç–∞—Ü—ñ—ó
"""

import asyncio
import httpx
import json
from datetime import datetime

async def test_reputation_analysis():
    """–¢–µ—Å—Ç—É—î API –∞–Ω–∞–ª—ñ–∑—É —Ä–µ–ø—É—Ç–∞—Ü—ñ—ó"""
    
    base_url = "http://localhost:8000"
    
    print("üöÄ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è AI –∞–Ω–∞–ª—ñ–∑—É —Ä–µ–ø—É—Ç–∞—Ü—ñ—ó...")
    print("=" * 50)
    
    async with httpx.AsyncClient(timeout=60.0) as client:
        try:
            # 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è API
            print("1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è API...")
            health_response = await client.get(f"{base_url}/api/health")
            if health_response.status_code == 200:
                print("‚úÖ API –ø—Ä–∞—Ü—é—î")
                health_data = health_response.json()
                print(f"   LLM Provider: {health_data.get('llm_provider', 'N/A')}")
            else:
                print(f"‚ùå API –Ω–µ –ø—Ä–∞—Ü—é—î: {health_response.status_code}")
                return
            
            # 2. –¢–µ—Å—Ç —à–≤–∏–¥–∫–æ–≥–æ –æ–≥–ª—è–¥—É
            print("\n2. –¢–µ—Å—Ç —à–≤–∏–¥–∫–æ–≥–æ –æ–≥–ª—è–¥—É...")
            summary_response = await client.get(f"{base_url}/api/reputation/summary?hours=24")
            if summary_response.status_code == 200:
                print("‚úÖ –®–≤–∏–¥–∫–∏–π –æ–≥–ª—è–¥ –ø—Ä–∞—Ü—é—î")
                summary_data = summary_response.json()
                print(f"   –í—Å—å–æ–≥–æ –≤—ñ–¥–≥—É–∫—ñ–≤: {summary_data['summary']['total_reviews']}")
                print(f"   –°–µ—Ä–µ–¥–Ω—ñ–π —Ä–µ–π—Ç–∏–Ω–≥: {summary_data['summary']['average_rating']}")
                print(f"   –¢–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å: {summary_data['summary']['sentiment_overview']}")
            else:
                print(f"‚ùå –®–≤–∏–¥–∫–∏–π –æ–≥–ª—è–¥ –Ω–µ –ø—Ä–∞—Ü—é—î: {summary_response.status_code}")
                print(f"   –ü–æ–º–∏–ª–∫–∞: {summary_response.text}")
            
            # 3. –¢–µ—Å—Ç –ø–æ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É (–∑ –æ–±–º–µ–∂–µ–Ω–Ω—è–º)
            print("\n3. –¢–µ—Å—Ç –ø–æ–≤–Ω–æ–≥–æ AI –∞–Ω–∞–ª—ñ–∑—É...")
            print("   (–ê–Ω–∞–ª—ñ–∑ 10 –≤—ñ–¥–≥—É–∫—ñ–≤ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 24 –≥–æ–¥–∏–Ω–∏)")
            
            analysis_response = await client.get(
                f"{base_url}/api/reputation/analyze?hours=24&max_reviews=10"
            )
            
            if analysis_response.status_code == 200:
                print("‚úÖ AI –∞–Ω–∞–ª—ñ–∑ –ø—Ä–∞—Ü—é—î")
                analysis_data = analysis_response.json()
                
                # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É:")
                print(f"   –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –≤—ñ–¥–≥—É–∫—ñ–≤: {len(analysis_data['insights'])}")
                print(f"   –ó–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª —Ä–µ–ø—É—Ç–∞—Ü—ñ—ó: {analysis_data['reputation_score']['overall_score']}")
                print(f"   –¢—Ä–µ–Ω–¥: {analysis_data['reputation_score']['trend']}")
                
                # –†–æ–∑–ø–æ–¥—ñ–ª —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ
                sentiment_dist = analysis_data['reputation_score']['sentiment_distribution']
                print(f"\nüòä –†–æ–∑–ø–æ–¥—ñ–ª —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ:")
                print(f"   –ü–æ–∑–∏—Ç–∏–≤–Ω—ñ: {sentiment_dist['positive']}")
                print(f"   –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ñ: {sentiment_dist['neutral']}")
                print(f"   –ù–µ–≥–∞—Ç–∏–≤–Ω—ñ: {sentiment_dist['negative']}")
                
                # –¢–æ–ø –ø—Ä–æ–±–ª–µ–º–∏
                if analysis_data['reputation_score']['top_issues']:
                    print(f"\n‚ö†Ô∏è –¢–æ–ø –ø—Ä–æ–±–ª–µ–º–∏:")
                    for i, issue in enumerate(analysis_data['reputation_score']['top_issues'][:3], 1):
                        print(f"   {i}. {issue}")
                
                # –ü–æ–∑–∏—Ç–∏–≤–Ω—ñ –∞—Å–ø–µ–∫—Ç–∏
                if analysis_data['reputation_score']['positive_aspects']:
                    print(f"\n‚úÖ –ü–æ–∑–∏—Ç–∏–≤–Ω—ñ –∞—Å–ø–µ–∫—Ç–∏:")
                    for i, aspect in enumerate(analysis_data['reputation_score']['positive_aspects'][:3], 1):
                        print(f"   {i}. {aspect}")
                
                # –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏
                if analysis_data['priority_issues']:
                    print(f"\nüö® –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏:")
                    for i, issue in enumerate(analysis_data['priority_issues'][:3], 1):
                        print(f"   {i}. {issue['issue']} (—Å–µ—Ä–π–æ–∑–Ω—ñ—Å—Ç—å: {issue['severity']})")
                        print(f"      –ß–∞—Å—Ç–æ—Ç–∞: {issue['frequency']} —Ä–∞–∑—ñ–≤")
                        print(f"      –í—ñ–¥–¥—ñ–ª: {issue['department']}")
                        print(f"      –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: {issue['recommended_response']}")
                        print()
                
                # –ü—Ä–∏–∫–ª–∞–¥ –∞–Ω–∞–ª—ñ–∑—É –æ–∫—Ä–µ–º–æ–≥–æ –≤—ñ–¥–≥—É–∫—É
                if analysis_data['insights']:
                    print(f"\nüîç –ü—Ä–∏–∫–ª–∞–¥ –∞–Ω–∞–ª—ñ–∑—É –≤—ñ–¥–≥—É–∫—É:")
                    first_insight = analysis_data['insights'][0]
                    print(f"   ID –≤—ñ–¥–≥—É–∫—É: {first_insight['review_id']}")
                    print(f"   –¢–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å: {first_insight['sentiment']['sentiment']}")
                    print(f"   –í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: {first_insight['sentiment']['confidence']:.2f}")
                    print(f"   –ù–∞–º—ñ—Ä: {first_insight['intent']['primary_intent']}")
                    print(f"   –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: {first_insight['priority_score']:.1f}")
                    print(f"   –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞ –¥—ñ—è: {first_insight['recommended_action']}")
                    if first_insight['topics']['main_topics']:
                        print(f"   –¢–µ–º–∏: {', '.join(first_insight['topics']['main_topics'])}")
                
            else:
                print(f"‚ùå AI –∞–Ω–∞–ª—ñ–∑ –Ω–µ –ø—Ä–∞—Ü—é—î: {analysis_response.status_code}")
                print(f"   –ü–æ–º–∏–ª–∫–∞: {analysis_response.text}")
            
            print("\n" + "=" * 50)
            print("üéâ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            
        except httpx.RequestError as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è: {e}")
            print("üí° –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ backend –∑–∞–ø—É—â–µ–Ω–∏–π –Ω–∞ http://localhost:8000")
        except Exception as e:
            print(f"‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")

async def test_without_openai():
    """–¢–µ—Å—Ç—É—î —Å–∏—Å—Ç–µ–º—É –±–µ–∑ OpenAI (mock –¥–∞–Ω—ñ)"""
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑ mock –¥–∞–Ω–∏–º–∏ (–±–µ–∑ OpenAI)...")
    
    base_url = "http://localhost:8000"
    
    async with httpx.AsyncClient(timeout=30.0) as client:
        try:
            # –¢–µ—Å—Ç –∑ mock –¥–∞–Ω–∏–º–∏
            response = await client.get(f"{base_url}/api/reputation/analyze?hours=24&max_reviews=5")
            
            if response.status_code == 200:
                print("‚úÖ Mock –∞–Ω–∞–ª—ñ–∑ –ø—Ä–∞—Ü—é—î")
                data = response.json()
                print(f"   –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ: {len(data['insights'])} –≤—ñ–¥–≥—É–∫—ñ–≤")
                print(f"   –ë–∞–ª —Ä–µ–ø—É—Ç–∞—Ü—ñ—ó: {data['reputation_score']['overall_score']}")
            else:
                print(f"‚ùå Mock –∞–Ω–∞–ª—ñ–∑ –Ω–µ –ø—Ä–∞—Ü—é—î: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

if __name__ == "__main__":
    print("ü§ñ Reputation Horizon - –¢–µ—Å—Ç AI –∞–Ω–∞–ª—ñ–∑—É")
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤
    asyncio.run(test_reputation_analysis())
    
    print("\n" + "=" * 50)
    print("üí° –î–ª—è –ø–æ–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ OPENAI_API_KEY –≤ .env —Ñ–∞–π–ª—ñ")
    print("üìñ –î–µ—Ç–∞–ª—å–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó: REPUTATION_ANALYSIS.md")
